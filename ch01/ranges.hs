-- レンジでチン！

{-

デフォルトではステップは1担っている
[4..9]  ->  [4, 5, 6, 7, 8, 9]

最初の二項を書くと、そのステップになった数列を返す
[1,4..14]  ->  [1, 4, 7, 10, 13]  ステップは3 (4-1で)

[1..]  ->  [1, 2, 3, 4, ...] 無限リスト
-}

{-

レンジを使って無限リストを生成できる
Haskellは遅延評価なので、無限リストをすぐに評価しない
そっちのほうがスマートらしい


13の倍数の最初の24個からなるリストを作る場合
[13,26..13*24] としてもできるが...

take 24 [13,26..]  の方がスマート

-}


{-
無限リストを返す関数たち

cycle は引数にリストを取り、それを無限に繰り返したリストを返す
take 5 (cycle [3, 2])  ->  [3, 2, 3, 2, 3]
take 10 (cycle "LOL ")  ->  "LOL LOL LO"


repeat は一つの要素を受取、その要素のみが繰り返される無限リストをかえす
take 4 (repeat 2)  ->  [2, 2, 2, 2]


replicate は単一の値からなるリストをつくる（上と似た感じ）
replicate 5 7  ->  [7, 7, 7, 7, 7]

-}


{-
レンジで浮動小数点数を扱うときには注意！

[0.1, 0.3 .. 1]  ->  [0.1, 0.3, 0.5, 0.7, 0.89999999, 1.09999999]
みたいになる

-}