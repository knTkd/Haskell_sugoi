{-# OPTIONS -Wall -Werror #-}

-- $ を使った関数適用


{-
$ 関数、またの名を関数適用演算子

定義 :
($) :: (a -> b) -> a -> b
f $ x = f x

単なる関数適用じゃないか！それでだいたいあってるが、それだけではない
普通の関数適用（2つのものの間に空白を置く）は引っ上に高い優先順位を持っているが、$関数は最も低い優先順位を持つ

スペースを用いた関数適用は左結合（ f a b c は ((f a) b) c) を意味する）けど、$による関数適用は右結合（ f a (b (c))っぽい感じ）


括弧の数を少なくしたい時、たいていはこの関数が役に立つ
例えば sum (map sqrt [1..130]) という式を考えて見る時、
$ は優先順位が低いので、この式を
sum $ map sqrt [1..130]と書き換えることができる

$ が出てきたら、その右側の式が左側の関数に引数として渡される

sqrt 3 + 4 + 9はsqrt 3が優先されるが、sqrt $ 3 + 4 + 9とすると、sqrt (3 + 4 + 9)と等価となる

$ ははるか右に閉じ括弧のある開き括弧だと考えることもできる
-}

{-
使用例
ghci> sum (filter (>10) (map (*2) [2..10]))
80
これをもっと目に優しく
ghci> sum $ filter (>10) $ map (*2) [2..10]


括弧を削除する話とは別に、$ は関数適用それ自身を関数として扱えるようにするためにも使える
例えば、関数適用をリストに対してmapするとか
ghci> map ($ 3) [(4+), (10*), (^2), sqrt]
[7.0, 30.0, 9.0, 1.7320508075688772]
($ 3)という関数は、関数を引数にとって、その関数を3に適用する関数だと考えられる
-}
